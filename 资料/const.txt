常变量

用 const 定义的变量的值是不允许改变的，即不允许给它重新赋值，即使是赋相同的值也不可以。所以说它定义的是只读变量。这也就意味着必须在定义的时候就给它赋初值。

用 const 修饰的变量，无论是全局变量还是局部变量，生存周期都是程序运行的整个过程。

局部变量存储在栈中，静态变量存储在静态存储区中，而经过 const 修饰过的变量存储在内存中的“只读数据段”中。只读数据段中存放着常量和只读变量等不可修改的量。

define是预编译指令，而const是普通变量的定义。

define定义的宏是在预处理阶段展开的，而const定义的只读变量是在编译运行阶段使用的。

const定义的是变量，而define定义的是常量。

define定义的宏在编译后就不存在了，它不占用内存，因为它不是变量，系统只会给变量分配内存。
但const定义的常变量本质上仍然是一个变量，具有变量的基本属性，有类型、占用存储单元。
可以说，常变量是有名字的不变量，而常量是没有名字的。有名字就便于在程序中被引用，
所以从使用的角度看，除了不能作为数组的长度，用const定义的常变量具有宏的优点，
而且使用更方便。所以编程时在使用const和define都可以的情况下尽量使用常变量来取代宏。

const定义的是变量，而宏定义的是常量，所以const定义的对象有数据类型，而宏定义的对象没有数据类型。
所以编译器可以对前者进行类型安全检查，而对后者只是机械地进行字符替换，没有类型安全检查。这样就很容易出问题，即“边际问题”或者说是“括号问题”。

const一般只用来修饰指针。

所谓的常量折叠是编译器的一种优化技术，也就是代码编译时时 const 常量表达式直接替换成立即数。

不过需要注意的时，const 常量仍然会分配内存空间。